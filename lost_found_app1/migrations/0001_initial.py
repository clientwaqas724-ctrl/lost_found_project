# Generated by Django 4.2.25 on 2025-10-25 18:36

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('user_type', models.CharField(choices=[('resident', 'DHUAM Resident'), ('admin', 'Administrator')], default='resident', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('tower_number', models.CharField(blank=True, max_length=10, null=True)),
                ('room_number', models.CharField(blank=True, max_length=10, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Claim',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('claim_description', models.TextField()),
                ('proof_of_ownership', models.TextField(blank=True)),
                ('supporting_images', models.ImageField(blank=True, null=True, upload_to='claim_support/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('returned', 'Item Returned')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='FoundItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('search_tags', models.TextField(blank=True, help_text='Comma-separated tags for manual image searching')),
                ('color_tags', models.CharField(blank=True, help_text='Comma-separated color descriptions', max_length=200)),
                ('material_tags', models.CharField(blank=True, help_text='Comma-separated material descriptions', max_length=200)),
                ('found_location', models.CharField(max_length=200)),
                ('found_date', models.DateField(default=datetime.date.today)),
                ('found_time', models.TimeField(blank=True, null=True)),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('color', models.CharField(blank=True, max_length=50)),
                ('size', models.CharField(blank=True, help_text='Size/dimensions of the item', max_length=50)),
                ('item_image', models.ImageField(blank=True, null=True, upload_to='found_items/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('storage_location', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('found', 'Found'), ('returned', 'Returned'), ('disposed', 'Disposed')], default='found', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lost_found_app1.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='found_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LostItem',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('search_tags', models.TextField(blank=True, help_text='Comma-separated tags for manual image searching')),
                ('color_tags', models.CharField(blank=True, help_text='Comma-separated color descriptions', max_length=200)),
                ('material_tags', models.CharField(blank=True, help_text='Comma-separated material descriptions', max_length=200)),
                ('lost_location', models.CharField(max_length=200)),
                ('lost_date', models.DateField(default=datetime.date.today)),
                ('lost_time', models.TimeField(blank=True, null=True)),
                ('brand', models.CharField(blank=True, max_length=100)),
                ('color', models.CharField(blank=True, max_length=50)),
                ('size', models.CharField(blank=True, help_text='Size/dimensions of the item', max_length=50)),
                ('item_image', models.ImageField(blank=True, null=True, upload_to='lost_items/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png'])])),
                ('status', models.CharField(choices=[('lost', 'Lost'), ('found', 'Found'), ('claimed', 'Claimed')], default='lost', max_length=20)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='lost_found_app1.category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lost_items', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('notification_type', models.CharField(choices=[('claim_update', 'Claim Status Update'), ('match_found', 'Potential Match Found'), ('item_found', 'Your Lost Item Found'), ('system', 'System Notification')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('claim', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lost_found_app1.claim')),
                ('found_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lost_found_app1.founditem')),
                ('lost_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='lost_found_app1.lostitem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ImageSearchLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('search_type', models.CharField(choices=[('lost', 'Lost Items'), ('found', 'Found Items')], max_length=20)),
                ('search_query', models.TextField(help_text='Search terms used')),
                ('color_filters', models.CharField(blank=True, max_length=200)),
                ('category_filters', models.CharField(blank=True, max_length=200)),
                ('results_count', models.IntegerField(default=0)),
                ('search_duration', models.FloatField(help_text='Search time in seconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='claim',
            name='found_item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to='lost_found_app1.founditem'),
        ),
        migrations.AddField(
            model_name='claim',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='claim',
            unique_together={('user', 'found_item')},
        ),
    ]
